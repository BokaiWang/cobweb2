/* Design log (as of November 27, 2007)
 * 
 * New classes:
 * - GeneticCode
 * - JUnit for GeneticCode
 * - GeneticCodeException
 * - PhenotypeMaster
 * 
 * Modifications to classes:
 * 1) ComplexAgent:
 * - Added global instance GeneticCode variable, "genetic_code"
 * - Added method, "getGeneticCode()"
 * - Added method, "getGeneticSequence()"
 * - Added line, "import ga.GeneticCode;"
 * - Added line, "import ga.GeneticCodeException;"
 * - Changed all three constructor methods so that they initialize GeneticCode instance variable
 *   % Mitotic constructor clones the GeneticCode sequence from the parent
 *   % Meiotic constructor creates a new GeneticCode sequence based on the two parents' 
 *     GeneticCode sequences
 *   % Spontaneously-spawned constructor initializes GeneticCode sequence directly from (user) String input
 *     and uses that String input to call method "setConstants()"
 * - Added "p.getGeneticSequence" to the setConstants() call of method "copyConstants()"
 * - Added "String genetic_sequence" parameter and line "genetic_code = new GeneticCode(genetic_sequence);"
 *   ... to "setConstants()"
 * - Silenced the print statements in method "broadcastFood()"
 * - For the mitotic and meiotic constructors, the line: 
 *      "((ComplexEnvironment)pos.getEnvironment()).getColorizer().colorAgent(this);"
 *   ... has been moved to the end, after the determination of genetic colour.
 * - Disabled a bunch of ui.writeToTextWindow() calls.
 * 
 * 2) SimpleAgent:
 * - Added global instance GeneticCode variable, "genetic_code"
 * - Added method, "getGeneticCode()"
 * - Added method, "getGeneticSequence()"
 * - Added line, "import ga.GeneticCode;"
 * 
 * 3) Agent:
 * - Added "public abstract GeneticCode getGeneticCode();"
 * - Added "public abstract String getGeneticSequence();"
 * - Added line, "import ga.GeneticCode;"
 * 
 * 4) Colorizer:
 * - Changed the "colorAgent()" method so that it is now based on the genetic code.
 * 
 * 5) BehaviorArray:
 * - Editted the copy() function. It no longer mutates the behaviour array.
 * 
 * 6) ComplexEnvironment:
 * - Added global instance String[1][10] variable "genetic_sequence"
 * - Global instance variable "agentTypeCountDependents" now includes "genetic_sequence"
 * - Added "genetic_sequence = p.genetic_sequence;" to method "load()"
 * - Added "genetic_sequence" to the "setConstants()" call in "load()"
 * - Added "genetic_sequence" to ComplexAgent constructor (spontaneous) calls in "load()"
 * - Silenced all System.out.println() statements
 * 
 * 7) Parser:
 * - Added: In the parsing section of the constructor, <agent/> flag
 *   is now read and information in nodes <agent[x]gene[y]/>, 
 *   <linkedphenotype[z]/>, and <meiosismode/> are stored as either
 *	 part of the genetic string of agent[x]'s gene[y]
 *   (Stored in ComplexAgent), the phenotype
 *	 that is linked to gene[z] (Stored in PhenotypeMaster), 
 *   or the mode of meiosis currently
 *   in use (stored in GeneticCode) 
 * 	 
 * 
 * 8) GUI:
 * - Silenced the annoying "printDebugData()" method
 * - Added a new JPanel for GA which is included in the tabbedPane.
 * - GA's JPanel includes:
 *	  - A JList whose elements are called from PhenotypeMaster's list of
 *       mutable phenotypes
 *	  - A JTable that stores/shows linked phenotypes and genetic
 *		sequences of each agent type
 *	  - Three JButtons, each links a phenotype selected from the JList
 *      to a specific gene (then updates the info on the JTable).
 *    - A JComboBox that lets users choose the mode of meiosis
 * - The class now implements ActionListener
 * - The JButtons and JComboBox in GA's JPanel now have responses in
 *   actionPerformed() that update variables after user actions
 * - A new writeHelperGA() method called by write() outputs GA variables
 *	 in appropriate flags.
     - Refer to Parser's entry for the specifics of each flag. 
